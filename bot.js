import { Telegraf } from "telegraf";
import RunwayML, { TaskFailedError, APIError } from "@runwayml/sdk";
import axios from "axios";
import fs from "fs";
import path from "path";
import sharp from "sharp";
import dotenv from "dotenv";

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const RUNWAY_API_KEY = process.env.RUNWAY_API_KEY;
const RUNWAY_VERSION = "2024-11-06";
const TMP_DIR = path.resolve("./images");

if (!fs.existsSync(TMP_DIR)) fs.mkdirSync(TMP_DIR);

const bot = new Telegraf(BOT_TOKEN);

const runway = new RunwayML({
  apiKey: RUNWAY_API_KEY,
  headers: { "X-Runway-Version": RUNWAY_VERSION },
});

const userPrompts = new Map();

bot.on("text", async (ctx) => {
  userPrompts.set(ctx.chat.id, ctx.message.text);
  await ctx.reply("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤–∏–¥–µ–æ.");
});

bot.on("photo", async (ctx) => {
  const prompt = userPrompts.get(ctx.chat.id);
  if (!prompt) {
    return ctx.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç-–æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ—Ç–æ–º —Ñ–æ—Ç–æ.");
  }

  const photo = ctx.message.photo.pop();
  const fileLink = await ctx.telegram.getFileLink(photo.file_id);
  const originalPath = path.join(TMP_DIR, `${photo.file_id}_orig.jpg`);
  const resizedPath = path.join(TMP_DIR, `${photo.file_id}_resized.jpg`);

  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await downloadFile(fileLink.href, originalPath);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ sharp
    const metadata = await sharp(originalPath).metadata();
    if (!metadata.width || !metadata.height) {
      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.");
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ");
    }

    if (metadata.width < 300 || metadata.height < 300) {
      await ctx.reply("‚ö†Ô∏è –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ñ–æ—Ç–æ –º–∏–Ω–∏–º—É–º 300x300 px.");
      throw new Error("–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ");
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ 720px –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
    const resizeDimension = 720;
    const needResize = Math.max(metadata.width, metadata.height) < resizeDimension;

    if (needResize) {
      await sharp(originalPath)
        .resize({ width: resizeDimension, height: resizeDimension, fit: "inside" })
        .jpeg({ quality: 85 })
        .toFile(resizedPath);
    } else {
      // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –∏ —Ç–∞–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º
      fs.copyFileSync(originalPath, resizedPath);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ratio –¥–ª—è Runway
    const ratio = metadata.width >= metadata.height ? "1280:720" : "720:1280";

    await ctx.reply("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ‚Ä¶");

    const videoUrl = await generateVideo(resizedPath, prompt, ratio);
    await ctx.replyWithVideo({ url: videoUrl });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", err);

    if (err instanceof TaskFailedError) {
      const details = err.taskDetails;
      if (details.failureCode === "INTERNAL.BAD_OUTPUT.CODE01") {
        await ctx.reply("‚ö†Ô∏è Runway –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.");
      } else {
        await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: ${details.failure || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
      }
    } else if (err instanceof APIError && err.body?.error?.includes("ratio")) {
      await ctx.reply("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω —É —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.");
    } else if (err.message === "–§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ" || err.message === "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ") {
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ
    } else {
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ üòî");
    }
  } finally {
    [originalPath, resizedPath].forEach((p) => fs.existsSync(p) && fs.unlinkSync(p));
    userPrompts.delete(ctx.chat.id);
  }
});

async function downloadFile(url, dest) {
  const response = await axios.get(url, { responseType: "stream" });
  const writer = fs.createWriteStream(dest);
  return new Promise((resolve, reject) => {
    response.data.pipe(writer);
    writer.on("finish", resolve);
    writer.on("error", reject);
  });
}

function makeDataURI(filePath) {
  const mime = "image/jpeg";
  const b64 = fs.readFileSync(filePath).toString("base64");
  return `data:${mime};base64,${b64}`;
}

async function generateVideo(imagePath, prompt, ratio) {
  const dataUri = makeDataURI(imagePath);

  const task = await runway.imageToVideo
    .create({
      model: "gen4",
      promptImage: dataUri,
      promptText: prompt,
      ratio,
      duration: 5,
       stylePreset: "cinematic",
      cameraMotion: "parallax",
      motion: 4,
      seed: 42,
    })
    .waitForTaskOutput();

  return task.output[0];
}

const DOMAIN = 'https://videomaker-pwn2.onrender.com';
const TOKEN = BOT_TOKEN;

bot.launch({
  webhook: {
    domain: DOMAIN,
    port: 3000,
    hookPath: `/${TOKEN}`,
  },
});

console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
